<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Will&#39;X Blog</title>
    <description>SE@SJTU 会一点C++/Go/Python/C/Java/Scheme 编程/平面设计/美</description>
    <link>http://willx8.com/</link>
    <atom:link href="http://willx8.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 22 Jan 2017 23:48:47 +0800</pubDate>
    <lastBuildDate>Sun, 22 Jan 2017 23:48:47 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Weird thread behaviour when instrumenting Parsec using PIN</title>
        <description>&lt;h1 id=&quot;problem&quot;&gt;Problem&lt;/h1&gt;

&lt;p&gt;When using &lt;em&gt;PIN&lt;/em&gt; to instrument a &lt;em&gt;parsec-3.0&lt;/em&gt; application(i.e. &lt;code&gt;canneal&lt;/code&gt;), I encounter &lt;code&gt;C: Tool (or Pin) caused signal 11 at PC xxx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some PIN application(like &lt;code&gt;malloctrace&lt;/code&gt;) does not have this problem, however when the PIN application is thread-related, e.g. we want to signal at every thread’s start:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int main() 
{
  // PIN init code
  ...
  PIN_AddFiniFunction(Fini, 0);
  
  // Register Analysis routines to be called when a thread begins
  PIN_AddThreadStartFunction(ThreadStart, 0);
  
  // Other instruments
  ...
}

void ThreadStart(THREADID tid, CONTEXT *ctxt, INT32 flags, VOID *v) 
{
  printf(&quot;thread:%d\n&quot;, tid);
}

VOID Fini(INT32 code, VOID *v)
{
  printf(&quot;finish.\n&quot;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a normal multi-thread application, instrumenting it leads to output like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

thread:0
thread:1
thread:2
(more threads)

...

finish.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Multiple “thread”s and single “finish”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But if instrumenting parsec using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pin -t &amp;lt;toolname&amp;gt; -- parsecmgmt -a run -c gcc-pthreads -p canneal -i simsmall -n 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We got:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

thread:0

...

finish.

...
finish.

(more finishes)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Single “thread”s and multiple “finish”.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;a-possible-explanation&quot;&gt;A Possible Explanation&lt;/h1&gt;

&lt;p&gt;I assume &lt;code&gt;parsecmgmt&lt;/code&gt; dynamically search, load and run (e.g. &lt;code&gt;execv()&lt;/code&gt;, but I have not read the source code) the binary for us and PIN got lost when the true binary is run. So it only sees one threads(the entry &lt;code&gt;parsecmgmt&lt;/code&gt;) but see many exits(multi-threads’ exits of &lt;code&gt;canneal&lt;/code&gt;).&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;p&gt;Don’t call the &lt;code&gt;parsecmgmt&lt;/code&gt; binary. It’s a wrapper and does a lot of other things (e.g. untar input file) besides running the true &lt;code&gt;canneal&lt;/code&gt; for us (which also generates some useless instrumenting information).&lt;/p&gt;

&lt;p&gt;Find the true binary in &lt;code&gt;pkgs/&lt;/code&gt;. For example, if we want to run the &lt;code&gt;canneal&lt;/code&gt;, the pthread version is &lt;code&gt;{parsec root}/pkgs/kernels/canneal/obj/amd64-linux.gcc-pthreads/canneal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the arguments, refer to &lt;code&gt;.runconf&lt;/code&gt; files. Say we like to run with input &lt;code&gt;-i simsmall&lt;/code&gt;, open &lt;code&gt;{parsec root}/pkgs/kernels/canneal/parsec/simsmall.runconf&lt;/code&gt;. And we manually enter the arguments in it: &lt;code&gt;{$NTHREADS} 4 10000 2000 100000.nets 32&lt;/code&gt;, replacing &lt;em&gt;NTHREADS&lt;/em&gt; with thread numbers like 8.&lt;/p&gt;

&lt;p&gt;The final version of &lt;em&gt;PIN&lt;/em&gt; command-line is like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pin -t &amp;lt;toolname&amp;gt; -- {parsec root}/pkgs/kernels/canneal/obj/amd64-linux.gcc-pthreads/canneal 8 4 10000 2000 100000.nets 32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It almost works except &lt;em&gt;parsec&lt;/em&gt; complains (vector out-of-range error) because it can’t find file &lt;code&gt;100000.nets&lt;/code&gt;. For &lt;code&gt;canneal&lt;/code&gt;, it’s in &lt;code&gt;{parsec root}/pkgs/kernels/canneal/inputs/input_simsmall.tar&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar -xf {parsec root}/pkgs/kernels/canneal/inputs/input_simsmall.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;100000.nets&lt;/code&gt; is in our current directory. Run the previous command-line again and everything is good. You may want to remove the untarred file to save space.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://willx8.com/2017/01/22/pin-parsec-seg-fault/</link>
        <guid isPermaLink="true">http://willx8.com/2017/01/22/pin-parsec-seg-fault/</guid>
        
        <category>Pin</category>
        
        <category>Parsec</category>
        
        
      </item>
    
      <item>
        <title>Install Parsec on Ubuntu 14/16, Fix Perl Error</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://yulistic.gitlab.io/2016/05/parsec-3.0-installation-issues/&quot;&gt;A useful post to correct &lt;code&gt;smime.pod&lt;/code&gt; error.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://willx8.com/2017/01/22/parsec-install-error-on-ubuntu14-16/</link>
        <guid isPermaLink="true">http://willx8.com/2017/01/22/parsec-install-error-on-ubuntu14-16/</guid>
        
        <category>Debug</category>
        
        
      </item>
    
      <item>
        <title>A Morgan Stanley Interview Recap | 一篇大摩面经</title>
        <description>&lt;p&gt;&lt;strong&gt;请勿转载。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;尽管我认为本人并没有在微博等网站上公开传播（如HR要求的那样），但如果你来自摩根斯坦利且认为这篇文章不符合保密规范，请联系我(willx8@gmail.com)更改或撤下。&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;4-24&lt;/h2&gt;

&lt;p&gt;接到了HR的电话告诉我过了，10周包住的实习。好像软院的暑假大作业不出国就必须要呆在学校里……？所以答应了NUS的暑期科研实习只能拒掉了这个offer……&lt;/p&gt;

&lt;p&gt;感觉MS还不错呀，明年有机会的话接着申吧……&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;4-15&lt;/h2&gt;

&lt;p&gt;我3月网上直接申的，不过听说参加学校的实习宣讲会可以有个面试（笔试？）机会，过了就可以直接进最终轮。流程是网申-网上测试-电话面试。一个礼拜前接到Assessment Center的邮件，告诉我电面过了。面试在浦东嘉里城，从闵大荒出发要换4部地铁。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;笔试&lt;/h1&gt;

&lt;p&gt;到了那边。先发了张卷子，两道题30分钟手写代码，两道算法题。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;算法题1：&lt;/h2&gt;

&lt;p&gt;一个公司架构，母公司可以有若干子公司，子公司也可以由若干母公司，每个公司都有直接雇佣的人数，设计算法求算每个公司包括其子公司在内的人数。&lt;/p&gt;

&lt;p&gt;如&lt;br /&gt;
      A&lt;br /&gt;
     / \&lt;br /&gt;
    B   C&lt;br /&gt;
     \ /&lt;br /&gt;
      D&lt;/p&gt;

&lt;p&gt;B,C是A的子公司，是D的母公司。人数分别为A:40, B:200, C:100, D:80&lt;br /&gt;
则算法结果应是 A:420, B:280, C:180, D:80&lt;/p&gt;

&lt;p&gt;一开始我掉进语言里写得很慢……最后发现只有十分钟了写了一行伪代码表示了很复杂的东西。。获得的经验就是&lt;strong&gt;写代码的时候就不要太注意code style和variable naming了吧……？&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;算法题2：&lt;/h2&gt;

&lt;p&gt;判断一个&lt;strong&gt;string&lt;/strong&gt;是否是&lt;em&gt;回文（Palindrome）&lt;/em&gt;？linked list of &lt;code&gt;char&lt;/code&gt;呢？&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-5&quot;&gt;第一轮面试&lt;/h1&gt;

&lt;p&gt;第一轮面试就是问了上面两个算法。听说别人还问了一些项目经验，而我……由于上来就和面试官说大二除了大作业没什么项目经验他就与我深入讨论算法了……&lt;/p&gt;

&lt;p&gt;上面两个算法是第一个小哥问的，小哥很友好，见面还问我怎么没穿西装，然后说也不是必须啦blabla……走了还问我大二学校同意你们出来实习吗……（好吧其实应该不同意……捂脸）&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;改进回文算法&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;string&lt;/code&gt;版本就是简单的递归啦。&lt;/p&gt;

&lt;p&gt;对linked list一开始给了个两个指针同时向中间靠拢的办法。然后……被提醒list是&lt;strong&gt;单向&lt;/strong&gt;的。以及，不知道这个list的长度。&lt;/p&gt;

&lt;p&gt;给他说了一个一边遍历一边把箭头反转指向的算法，然后让写下来，给他解释完他说挺creative的。&lt;/p&gt;

&lt;p&gt;最后问了他还能怎么改进，他说的trick是&lt;em&gt;fast and slow pointer&lt;/em&gt;，i.e.快的步长2，慢的步长1，快的到&lt;code&gt;&#39;\0&#39;&lt;/code&gt;时慢的刚好到中间（因为我用了遍历一边数长度的方法）。顺便夸了反转箭头这个idea…&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;子公司人数算法&lt;/h2&gt;

&lt;p&gt;用了个DAG上的拓扑排序，然后用&lt;code&gt;std::set&lt;/code&gt;记录所有子公司的方法。讲了半天终于把算法说通了，后来问小哥才发现拓扑排序其实可以自然地用递归调用蕴含……所以他才对拓扑排序毫无准备吧……&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-8&quot;&gt;第二轮面试&lt;/h1&gt;

&lt;p&gt;第一个小哥走了之后进来了两个人，一个人看起来比较像网上说的不是大陆人的boss（仿佛是native English speaker），另一个是问我技术的小哥。先是自我介绍，听说我大二，以及我说了没做什么大项目之后还是问了我一大堆算法……&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;算法题……3&lt;/h2&gt;

&lt;p&gt;Boss问的：&lt;br /&gt;
从1~100中选出99个整数成为一个&lt;code&gt;array&lt;/code&gt;，找到缺少的那个数。&lt;/p&gt;

&lt;h3 id=&quot;v1&quot;&gt;v1&lt;/h3&gt;

&lt;p&gt;sort and binary search.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Time?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; O(nlogn)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;：有没有O(n)的算法？&lt;/p&gt;

&lt;h3 id=&quot;v2&quot;&gt;v2&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;：全部加起来求和，用5050减掉这个和&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;：这个算法是否有缺陷？&lt;/p&gt;

&lt;p&gt;没答出。提醒我以后发现是overflow问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;：如果只能用&lt;code&gt;char&lt;/code&gt;(1byte)表示整数呢？&lt;/p&gt;

&lt;p&gt;我还在想的时候小哥说已经差不多了，直接move on到下一题了。后来我问他他说是XOR的bit trick&lt;/p&gt;

&lt;h1 id=&quot;section-10&quot;&gt;下一题&lt;/h1&gt;

&lt;p&gt;判断两个词所用字母是否相同，想了一会儿被告知不要想太多……&lt;br /&gt;
所以就答了用26个bool判断每个字母出现与否。&lt;/p&gt;

&lt;p&gt;怎么优化？答bit trick，可以从26bytes的空间复杂度降到26bits&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;其他&lt;/h2&gt;

&lt;p&gt;还被问了FUNCTION-LIKE MACRO的坏处 答了一堆：compiler看不见难debug，要括号，传++a会加两次etc&lt;/p&gt;

&lt;p&gt;Q: 怎么改进？&lt;/p&gt;

&lt;p&gt;B: &lt;code&gt;inline function&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Q: &lt;code&gt;inline function&lt;/code&gt;永远是&lt;code&gt;inline&lt;/code&gt;的吗？&lt;/p&gt;

&lt;p&gt;A: 不是，看编译器&lt;/p&gt;

&lt;p&gt;Q: 编译器 &lt;code&gt;-O2&lt;/code&gt; &lt;code&gt;-O3&lt;/code&gt;优化的区别？说不清楚然后猜了一堆，被告知有关于&lt;code&gt;inline function&lt;/code&gt;的优化&lt;/p&gt;

&lt;p&gt;Q: 除了&lt;code&gt;#define&lt;/code&gt;还有哪些preprocessor？&lt;/p&gt;

&lt;p&gt;A: &lt;code&gt;#include&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Q: 那&lt;code&gt;#include&lt;/code&gt;怎么保证相同头文件不被&lt;code&gt;#include&lt;/code&gt;两次？&lt;/p&gt;

&lt;p&gt;A: &lt;code&gt;#ifndef&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;接着开始问我继承和虚函数，比如&lt;code&gt;B:A&lt;/code&gt;，&lt;code&gt;B&lt;/code&gt;的&lt;code&gt;virtual function&lt;/code&gt;和&lt;code&gt;A&lt;/code&gt;的有什么区别，在内存中怎么表示。一个Pointer怎么知道自己指向的是&lt;code&gt;B&lt;/code&gt;还是&lt;code&gt;A&lt;/code&gt;，内存中有没有存？&lt;code&gt;vtable&lt;/code&gt;怎么区分两个&lt;code&gt;virtual function&lt;/code&gt;……我算是乱答了一气吧&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;反问&lt;/h2&gt;

&lt;p&gt;最后结尾还是反问吧……我就问了第一道题怎么解，就有了上面的回答。他们还问了还有没有在申别的实习，我说了在申NUS的暑期科研实习，然后技术小哥建议先来工业界实习……没了&lt;/p&gt;

</description>
        <pubDate>Sat, 23 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://willx8.com/2016/04/23/MorganS-Intern-Interview/</link>
        <guid isPermaLink="true">http://willx8.com/2016/04/23/MorganS-Intern-Interview/</guid>
        
        <category>面试</category>
        
        <category>算法</category>
        
        <category>暑假</category>
        
        
      </item>
    
      <item>
        <title>6.824 Lab2: Fault-tolerant</title>
        <description>&lt;p&gt;开学快乐。&lt;/p&gt;

&lt;p&gt;由于摸鱼癌发作，在“春节为什么要学习”的自我催眠中度过了剩下的寒假，现在我已经来到了闵大荒。把这篇6.824的&lt;strong&gt;Lab2&lt;/strong&gt;补完吧。其实6.824除了lab之外，主页上还有很多lecture的note和课前读的paper，都是很不错的资料。&lt;/p&gt;

&lt;p&gt;简单说，&lt;strong&gt;Lab2&lt;/strong&gt;就是让我们深入体会fault-tolerant的。&lt;/p&gt;

&lt;h2 id=&quot;part-a-the-view-service&quot;&gt;Part A: The view service&lt;/h2&gt;
&lt;p&gt;这一部分比较简单，Lab介绍也是这样说的。根据介绍搞清楚view service的原理之后，用几个if-else就可以解决，跑过test没有太大问题。&lt;/p&gt;

&lt;p&gt;当然，如同Lab介绍所说，即使你的view service跑过Part A的测试，也有可能在Part B里出错。我就遇到了这样的情况，问题在dead primary上。介绍说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the view service has not yet received an acknowledgment for the current view from the primary of the current view, the view service should not change views even if it thinks that the primary or backup has died.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Which view? Current view, not next view.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which primary? Current primary, not primary of the next view.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不同的primary failure对应不同的处理方式，比如：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;我们约定用{primary, backup, view number}来描述一个view, ““表示没有服务器&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;case-1&quot;&gt;CASE 1&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Assuming no idle server in this case.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;current view: {s1, , 1} &lt;em&gt;(Assuming that s1 has &lt;strong&gt;acknowledged&lt;/strong&gt; this view)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;s1 die.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;start s2.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终会变成什么view？&lt;/p&gt;

&lt;p&gt;答：{s1, s2, 2}.&lt;/p&gt;

&lt;p&gt;因为：&lt;/p&gt;

&lt;p&gt;s2: ping(0). reply: {s1, s2, 2} (s1 has ACKed view 1)&lt;/p&gt;

&lt;p&gt;s2: ping(2). reply: {s1, s2, 2} (s1 has not ACKed view 2, so we can’t proceed to view 3 {s2, , 3})&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h4 id=&quot;case-2&quot;&gt;CASE 2&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Assuming no idle server in this case.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;current view: {s1, , 1} &lt;em&gt;(Assuming that s1 has &lt;strong&gt;acknowledged&lt;/strong&gt; this view)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;start s2.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;s1 die. &lt;em&gt;(Asumming s2 has started long enough.)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终会变成什么view？&lt;/p&gt;

&lt;p&gt;答：{s2, , 3}.&lt;/p&gt;

&lt;p&gt;因为：&lt;/p&gt;

&lt;p&gt;s2: ping(0). reply: {s1, s2, 2}&lt;/p&gt;

&lt;p&gt;s2: ping(2). reply: {s1, s2, 2}&lt;/p&gt;

&lt;p&gt;s1: ping(1). reply: {s1, s2, 2}&lt;/p&gt;

&lt;p&gt;s1: ping(2). reply: {s1, s2, 2} (Now s1 has ACKed view 2)&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;s1 die.&lt;/p&gt;

&lt;p&gt;s2: ping(2). reply: {s2, , 3} (Since s1 has ACKed view 2)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这两个case说明了uninitialized server can’t become primary.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;part-b-primarybackup-service&quot;&gt;Part B: primary/backup service&lt;/h2&gt;

&lt;p&gt;Part B的test_test.go近千行，比Part A的长的多，对我而言按照Lab要求完成后基本能跑过TestBasicFail，之后就是…test-driven-programming了。&lt;/p&gt;

&lt;p&gt;所以接下来的内容也是test-driven的，以下是除了TestBasicFail之外的所有Test名称：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TestAtMostOnce&lt;/li&gt;
  &lt;li&gt;TestFailPut&lt;/li&gt;
  &lt;li&gt;TestConcurrentSame&lt;/li&gt;
  &lt;li&gt;TestConcurrentSameUnreliable&lt;/li&gt;
  &lt;li&gt;TestRepeatedCrash&lt;/li&gt;
  &lt;li&gt;TestRepeatedCrashUnreliable&lt;/li&gt;
  &lt;li&gt;TestPartition1&lt;/li&gt;
  &lt;li&gt;TestPartition2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对了，可以用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;
&amp;gt; go test -run TestXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来跑特定的测试函数TestXXX。&lt;/p&gt;

&lt;h3 id=&quot;testatmostonce&quot;&gt;TestAtMostOnce&lt;/h3&gt;

&lt;p&gt;即采用at-most-once策略。当出现server收到put/get，但reply丢包或time-out致使client认为server没有收到于是再次发送put/get的情况时，server直接给出记录的上一个reply。故client的每个put/get都有一个unique Id(UID)，server端会记下UID对应的reply，并有相应的释放机制（&lt;a href=&quot;http://css.csail.mit.edu/6.824/2014/notes/l02.txt&quot;&gt;lecture2&lt;/a&gt;有提到，如约定client最多不断重试5分钟，server只会保存最近5分钟的UID。当然这个lab不需要实现这个机制）。&lt;/p&gt;

&lt;p&gt;同时，client若没收到reply(call timeout)或收到空reply，则再隔一定时间向server发送request直到收到非空reply。&lt;/p&gt;

&lt;h3 id=&quot;testfailput&quot;&gt;TestFailPut&lt;/h3&gt;

&lt;p&gt;要保证backup被初始化，即新backup出现时，primary会向backup发送所有primary记录的key-value。这样即使primary fail了，backup也会拥有原来的数据。&lt;/p&gt;

&lt;p&gt;这一部分也就是hint所说的&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;you’ll probably need to create new RPCs to handle the transfer of the complete key/value database from the primary to a new backup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我的实现是为server添加raw属性，raw backup server在&lt;code&gt;tick&lt;/code&gt;（而不是&lt;code&gt;StartServer&lt;/code&gt;中，否则无法初始化从idle server列表中提拔上来的backup，也无法在失败后重试）里都会向primary发送RPC请求，primary收到后会把现在所有的key/value复制给backup.&lt;/p&gt;

&lt;h3 id=&quot;testconcurrentsame&quot;&gt;TestConcurrentSame&lt;/h3&gt;

&lt;p&gt;只要保证每个primary收到的put都先向backup发送一次put(from primary)再返回，问题应该不大。&lt;/p&gt;

&lt;h3 id=&quot;testconcurrentsameunreliable&quot;&gt;TestConcurrentSameUnreliable&lt;/h3&gt;

&lt;p&gt;所有后缀Unreliable的test都是使用了模拟的不稳定RPC，有一定概率（10%）server端什么都没收到(无request)，一定概率（20%）server无返回(reply为空)，分别模拟进出网络的故障。而且Unreliable的test往往用PutHash，因此必须严格保证at-most-once.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TestAtMostOnce&lt;/em&gt;已经提到解决方法。&lt;/p&gt;

&lt;h3 id=&quot;testrepeatedcrash&quot;&gt;TestRepeatedCrash&lt;/h3&gt;

&lt;p&gt;Server端不断地crash&amp;amp;restart，但client端始终能保持稳定的put/get. 所有的备份，包括新backup向primary要备份，primary的每个put/get都向backup备份做好即可。&lt;/p&gt;

&lt;h3 id=&quot;testrepeatedcrashunreliable&quot;&gt;TestRepeatedCrashUnreliable&lt;/h3&gt;

&lt;p&gt;如&lt;em&gt;TestConcurrentSameUnreliable&lt;/em&gt;所述，所有后缀Unreliable都是类似的。&lt;/p&gt;

&lt;h3 id=&quot;testpartition12&quot;&gt;TestPartition1&amp;amp;2&lt;/h3&gt;

&lt;p&gt;这个test用了延迟的get，当get到达原来的primary s1时，由于s1久未ping view server, view server记录的当前view的primary已经不是s1. 且get的key对应的value已经改变。&lt;/p&gt;

&lt;p&gt;对于server而言，当自己不是primary时，应当拒绝所有不来自primary的put/get；当自己是primary时，所有来自client的put/get需要再向backup备份，若backup拒绝（因为自己所知的更高的view里发送方不再是primary）了request，则向client返回错误。&lt;/p&gt;

&lt;p&gt;Client的put/get会一直尝试到server成功put/get, 所以无论如何都不会获取原来的key对应的值，而是在数次尝试失败后重新向view server询问当前view，得知新的primary，再向该primary发送put/get.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;其他&lt;/h2&gt;

&lt;h3 id=&quot;golang&quot;&gt;Golang的指针&lt;/h3&gt;

&lt;p&gt;golang返回指针比C方便，即使是局部变量的指针也可以正常返回。但指针作为参数时和C还是很接近的。&lt;/p&gt;

&lt;p&gt;由于没有注意指针的使用，我的client一直收不到put reply，即primary server已经完成put了但是client那边收到的reply一直是空。因为那个test case刚好是unreliable后缀的，让我一度觉得是unreliable的问题……&lt;/p&gt;

&lt;p&gt;总结一下就是，猜猜下面这段代码会输出什么呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-golang&quot;&gt;package main

import &quot;fmt&quot;

type PutReply struct {
	s string
}

func call(reply *PutReply) *PutReply {
	reply = &amp;amp;PutReply{&quot;world!&quot;}
	return reply
}

func main() {
	reply := PutReply{&quot;Hello,&quot;}
	nr := call(&amp;amp;reply)
	fmt.Println(reply.s, nr.s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;答：”Hello, wrold!”&lt;/p&gt;

&lt;p&gt;如果用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-golang&quot;&gt;*reply = &amp;amp;PutReply{&quot;world!&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果便会是 “world! world!”&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://willx8.com/2016/02/23/6824-lab2/</link>
        <guid isPermaLink="true">http://willx8.com/2016/02/23/6824-lab2/</guid>
        
        <category>寒假</category>
        
        <category>6.824</category>
        
        <category>分布式系统</category>
        
        
      </item>
    
      <item>
        <title>Happy Birthday!</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;小喵二十岁啦&lt;/h2&gt;

&lt;p&gt;祝我最爱的宝贝生日快乐~&lt;/p&gt;

&lt;p&gt;今年你的生日正巧是大年初一。在外面鞭炮的噼里啪啦中，我们和整座城市一起庆祝~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;又爱了一整岁的你了，和你一起在闵行、上海、宁波和内斗省吃吃玩玩超开心。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;就算不是异地还是能每天和你打两个小时的电话停不下来。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为，这是我陪你过的第三个生日了，对你的感受还是：&lt;strong&gt;一见倾心&lt;/strong&gt;！&lt;/p&gt;

&lt;p&gt;所以，今年的礼物是&lt;em&gt;一见倾心&lt;/em&gt;~&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;祝福时间&lt;/h2&gt;

&lt;p&gt;你的20岁的开头正好也是新的一年的开始呢。&lt;/p&gt;

&lt;p&gt;小喵今年也会一如既往地：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;好看&lt;/li&gt;
  &lt;li&gt;可爱&lt;/li&gt;
  &lt;li&gt;聪明&lt;/li&gt;
  &lt;li&gt;有趣&lt;/li&gt;
  &lt;li&gt;
    &lt;s&gt; 笨！&lt;/s&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;松弛&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;喜欢可爱的自己&lt;/li&gt;
  &lt;li&gt;和我一起愉快地玩&lt;/li&gt;
  &lt;li&gt;想要的好事都发生&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;嘿嘿 我爱你&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;呼噜。&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://willx8.com/2016/02/08/syl-birthday/</link>
        <guid isPermaLink="true">http://willx8.com/2016/02/08/syl-birthday/</guid>
        
        <category>你的生日</category>
        
        
      </item>
    
      <item>
        <title>A Review of SICP Chapter1</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“A computational process is indeed much like a sorcerer’s idea of a spirit. “&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;刚刚看完SICP第一章，Building Abstractions with Procedures.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/willx8/sicp-log/blob/master/chp1/SICP-C1.scm&quot;&gt;这里是我的第一章&lt;s&gt;跳了不少题的&lt;/s&gt;题解。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;写一篇读书笔记，算是让自己回顾一下。只提几个有趣之处。&lt;/p&gt;

&lt;s&gt;实在找不到好看的题图就只好自己做了张。&lt;/s&gt;

&lt;h1 id=&quot;evaluation&quot;&gt;1.Evaluation&lt;/h1&gt;
&lt;p&gt;Exercise 1.5可以看到两种方式(applicative-order evaluation &amp;amp; normal-order)的区别，为了避免一句话里中英夹杂让人不爽，下面有些解答直接用英文了。&lt;/p&gt;

&lt;h3 id=&quot;exercise-15&quot;&gt;Exercise 1.5.&lt;/h3&gt;
&lt;p&gt;Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then he evaluates the expression&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What behavior will Ben observe with an interpreter that uses &lt;em&gt;applicative-order&lt;/em&gt; evaluation? What behavior will he observe with an interpreter that uses &lt;em&gt;normal-order&lt;/em&gt; evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)&lt;/p&gt;

&lt;h3 id=&quot;solution-15&quot;&gt;Solution 1.5.&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;If an interpreter uses normal-order evaluation:&lt;br /&gt;
&lt;code&gt;(test 0 (p))&lt;/code&gt; will be evaluated &lt;code&gt;(if (= 0 0) 0 p)&lt;/code&gt;. Then “the predicate expression is evaluated first”, thus &lt;code&gt;(= 0 0)&lt;/code&gt; generate true, the result shall be &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If an interpreter uses applicative-order evalution:&lt;br /&gt;
&lt;code&gt;(test 0 (p))&lt;/code&gt; will be &lt;code&gt;(test 0 (p))&lt;/code&gt;, intepreter ‘substitute’ &lt;code&gt;(p)&lt;/code&gt; for &lt;code&gt;(p)&lt;/code&gt; forever, the answer will never be genearted.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;下面关于new-if的题可以和上面这道连起来看：&lt;/p&gt;

&lt;h3 id=&quot;exercise-16&quot;&gt;Exercise 1.6.&lt;/h3&gt;
&lt;p&gt;Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. “Why can’t I just define it as an ordinary procedure in terms of cond?” she asks. Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;then-clause&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;else-clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;then-clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;else-clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Eva demonstrates the program for Alyssa:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Delighted, Alyssa uses new-if to rewrite the square-root program:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqrt-iter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;good-enough?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqrt-iter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;improve&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What happens when Alyssa attempts to use this to compute square roots? Explain.&lt;/p&gt;

&lt;h3 id=&quot;solution-16&quot;&gt;Solution 1.6.&lt;/h3&gt;
&lt;p&gt;Since our interpreter uses applicative-order evaluation, new-if is interpreted later than &amp;lt;else-clause&amp;gt;. The interpreter evaluates &amp;lt;predicate expression&amp;gt;. Then it evaluates &amp;lt;else-clause&amp;gt;: we have &lt;code&gt;(improve guess x)&lt;/code&gt; evaluated first, call it &lt;code&gt;y1&lt;/code&gt; , then &lt;code&gt;sqrt-iter&lt;/code&gt; evaluated:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqrt-iter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;lt;some-evaluated-value&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new-if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;good-enough?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          		&lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;
	          	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sqrt-iter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;improve&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                     		&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since no branch decision is made due to the late-evaluation of &lt;code&gt;new-if&lt;/code&gt;, there will be an infinite substition of &lt;code&gt;sqrt-iter&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section&quot;&gt;2.花式斐波那契&lt;/h1&gt;
&lt;p&gt;1.2.4的练习题组很巧妙。一步步引到1.19上，教你把一次求斐波那契数列下一项的过程看做一次变换&lt;em&gt;T&lt;/em&gt;，如果找到等价于运用两次变换&lt;em&gt;T&lt;/em&gt;的变换&lt;em&gt;T’&lt;/em&gt;，由于找到了&lt;em&gt;T&lt;/em&gt;的“平方”，就可以像快速幂一样用O(log n)的速度求出答案。&lt;/p&gt;

&lt;p&gt;而&lt;em&gt;T&lt;/em&gt;实际就是矩阵乘法，所谓两次&lt;em&gt;T&lt;/em&gt;变换就是矩阵的平方。所以这题也可以看成是矩阵乘法的“快速幂”。看题：&lt;/p&gt;

&lt;h3 id=&quot;exercies-119&quot;&gt;Exercies 1.19.&lt;/h3&gt;

&lt;p&gt;There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps.&lt;/p&gt;

&lt;p&gt;Recall the transformation of the state variables &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; in the &lt;tt&gt;fib-iter&lt;/tt&gt; process of section 1.2.2: &lt;em&gt;a&lt;/em&gt; &amp;lt;- &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; &amp;lt;-&lt;em&gt;a&lt;/em&gt;.  Call this transformation &lt;em&gt;T&lt;/em&gt;, and observe that applying &lt;em&gt;T&lt;/em&gt; over and over again &lt;em&gt;n&lt;/em&gt; times, starting with 1 and 0, produces the pair &lt;em&gt;F&lt;/em&gt;&lt;em&gt;i&lt;/em&gt;&lt;em&gt;b&lt;/em&gt;(&lt;em&gt;n + 1&lt;/em&gt;) and  &lt;em&gt;F&lt;/em&gt;&lt;em&gt;i&lt;/em&gt;&lt;em&gt;b&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;).  In other words, the Fibonacci numbers are produced by applying &lt;em&gt;T&lt;/em&gt;&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt;, the &lt;em&gt;n&lt;/em&gt;th power of the transformation &lt;em&gt;T&lt;/em&gt;, starting with the pair (1,0).  Now consider &lt;em&gt;T&lt;/em&gt; to be the special case of &lt;em&gt;p&lt;/em&gt; = 0 and &lt;em&gt;q&lt;/em&gt; = 1 in a family of transformations &lt;em&gt;T&lt;/em&gt;&lt;sub&gt;&lt;em&gt;p&lt;/em&gt;&lt;em&gt;q&lt;/em&gt;&lt;/sub&gt;, where &lt;em&gt;T&lt;/em&gt;&lt;sub&gt;&lt;em&gt;p&lt;/em&gt;&lt;em&gt;q&lt;/em&gt;&lt;/sub&gt; transforms the pair &lt;em&gt;(a, b)&lt;/em&gt; according to &lt;em&gt;a&lt;/em&gt; &amp;lt;- &lt;em&gt;b&lt;/em&gt;&lt;em&gt;q&lt;/em&gt; + &lt;em&gt;a&lt;/em&gt;&lt;em&gt;q&lt;/em&gt; + &lt;em&gt;a&lt;/em&gt;&lt;em&gt;p&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; &amp;lt;- &lt;em&gt;b&lt;/em&gt;&lt;em&gt;p&lt;/em&gt; + &lt;em&gt;a&lt;/em&gt;&lt;em&gt;q&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Show that if we apply such a transformation &lt;em&gt;T&lt;/em&gt;&lt;sub&gt;&lt;em&gt;p&lt;/em&gt;&lt;em&gt;q&lt;/em&gt;&lt;/sub&gt; twice, the effect is the same as using a single transformation &lt;em&gt;T&lt;sub&gt;p’q’&lt;/sub&gt;&lt;/em&gt; of the same form, and compute &lt;em&gt;p&lt;/em&gt;’ and &lt;em&gt;q&lt;/em&gt;’ in terms of &lt;em&gt;p&lt;/em&gt; and &lt;em&gt;q&lt;/em&gt;.  This gives us an explicit way to square these transformations, and thus we can compute &lt;em&gt;T&lt;/em&gt;&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt; using successive squaring, as in the &lt;tt&gt;fast-expt&lt;/tt&gt; procedure.  Put this all together to complete the following procedure, which runs in a logarithmic number of steps:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fib-iter&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fib-iter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;even? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fib-iter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;
                   &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;
                   &lt;span class=&quot;nv&quot;&gt;&amp;lt;??&amp;gt;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;; compute p&amp;#39;&lt;/span&gt;
                   &lt;span class=&quot;nv&quot;&gt;&amp;lt;??&amp;gt;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;; compute q&amp;#39;&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fib-iter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;* &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;solution-119&quot;&gt;Solution 1.19.&lt;/h3&gt;

&lt;p&gt;Notice that:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;
&lt;mrow&gt;&lt;mfenced open=&quot;(&quot; close=&quot;)&quot;&gt;&lt;mtable&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;/mfenced&gt;&lt;mfenced&gt;&lt;mfrac linethickness=&quot;0&quot;&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mrow&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mfenced&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfenced&gt;&lt;mfrac linethickness=&quot;0&quot;&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mrow&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mrow&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mfenced&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfenced&gt;&lt;mfrac linethickness=&quot;0&quot;&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mrow&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mrow&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mfenced&gt;&lt;/mrow&gt;&lt;/math&gt;

&lt;p&gt;Which indicates the transformation &lt;em&gt;T&lt;/em&gt; can be regard as matrix multiplication, or linear transformation. Thus applying &lt;em&gt;T&lt;/em&gt; twice is merely square a matrix:&lt;/p&gt;

&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;&gt;
&lt;mrow&gt;&lt;msup&gt;&lt;mrow&gt;&lt;mfenced open=&quot;(&quot; close=&quot;)&quot;&gt;&lt;mtable&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;/mfenced&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfenced open=&quot;(&quot; close=&quot;)&quot;&gt;&lt;mtable&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;msup&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;mtd&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mrow&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;/mfenced&gt;&lt;/mrow&gt;&lt;/math&gt;

&lt;p&gt;We derive a new matrix in the same form of the former one, where&lt;/p&gt;

&lt;p&gt;&lt;em&gt;p’ = p&lt;sup&gt;2&lt;/sup&gt;+q&lt;sup&gt;2&lt;/sup&gt;, q’ = 2pq+q&lt;sup&gt;2&lt;/sup&gt;,&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;which is the answer we are looking for.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;fermat-test&quot;&gt;3. Fermat Test&lt;/h1&gt;
&lt;p&gt;这部分用费马小定理做质数检验的内容挺有趣。这是一个把指数检验的时间复杂度从O(n&lt;sup&gt;1/2&lt;/sup&gt;)降到O(log n)的&lt;em&gt;probabilistic methods&lt;/em&gt;. 注释47的一段话很有意思：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In testing primality of very large numbers chosen at random, the chance of stumbling upon a value that fools the Fermat test is less than the chance that cosmic radiation will cause the computer to make an error in carrying out a “correct” algorithm. Considering an algorithm to be inadequate for the first reason but not for the second illustrates the difference between mathematics and engineering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;lambda&quot;&gt;4. Lambda大法好&lt;/h1&gt;
&lt;p&gt;1.3节大概是真的开始函数式编程了。这一节每组题基本都层层递进，不断往高层次抽象过程，很有趣，像我这样喜欢跳题的全做了，有兴趣可以看我的题解。两道题值得再提一下。&lt;/p&gt;

&lt;h3 id=&quot;exercise-141&quot;&gt;Exercise 1.41.&lt;/h3&gt;

&lt;p&gt;Define a procedure double that takes a procedure of one argument as argument and returns a procedure that applies the original procedure twice. For example, if &lt;code&gt;inc&lt;/code&gt; is a procedure that adds 1 to its argument, then &lt;code&gt;(double inc)&lt;/code&gt; should be a procedure that adds 2. What value is returned by&lt;code&gt;(((double (double double)) inc) 5)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution-141&quot;&gt;Solution 1.41:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-scheme&quot;&gt;&amp;gt; (((double (double double)) inc) 5)
  21
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;补充&lt;/h3&gt;

&lt;p&gt;值得注意的是语法。我们会发现这句话&lt;code&gt;(((double (double double)) inc) 5)&lt;/code&gt;其实和下面是等价的：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;((((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而&lt;code&gt;inc&lt;/code&gt;竟然能这样作为参数被进新的procedure&lt;code&gt;(double (double double))&lt;/code&gt;中。我觉得，毕竟还是第一章，既然书里也没进一步解释，&lt;strong&gt;just remember that this patterns works.&lt;/strong&gt;等后面进一步讲语法的时候再来看解释器的具体实现吧，&lt;strong&gt;那么这里就要挖一个坑等以后填了。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;exercise-145&quot;&gt;Exercise 1.45.&lt;/h3&gt;
&lt;p&gt;We saw in section 1.3.3 that attempting to compute square roots by naively finding a fixed point of &lt;em&gt;y-&amp;gt;x/y&lt;/em&gt; does not converge, and that this can be fixed by average damping. The same method works for finding cube roots as fixed points of the average-damped &lt;em&gt;y-&amp;gt;x/y&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;. Unfortunately, the process does not work for fourth roots – a single average damp is not enough to make a fixed-point search for &lt;em&gt;y-&amp;gt;x/y&lt;sup&gt;3&lt;/sup&gt;&lt;/em&gt; converge. On the other hand, if we average damp twice (&lt;em&gt;i.e.&lt;/em&gt;, use the average damp of the average damp of &lt;em&gt;y-&amp;gt;x/y&lt;sup&gt;3&lt;/sup&gt;&lt;/em&gt;) the fixed-point search does converge. Do some experiments to determine how many average damps are required to compute nth roots as a fixed-point search based upon repeated average damping of &lt;em&gt;y-&amp;gt;x/y&lt;sup&gt;n-1&lt;/sup&gt;&lt;/em&gt;. Use this to implement a simple procedure for computing &lt;em&gt;n&lt;/em&gt;th roots using &lt;code&gt;fixed-point&lt;/code&gt;, &lt;code&gt;average-damp&lt;/code&gt;, and the &lt;code&gt;repeated&lt;/code&gt; procedure of exercise 1.43. Assume that any arithmetic operations you need are available as primitives.&lt;/p&gt;

&lt;h3 id=&quot;solution-145&quot;&gt;Solution 1.45.&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeated&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;lt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;composition&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeated&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;n-th-root&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fixed-point&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeated&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;average-damp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;log &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;log &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fast-expt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;- &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;code&gt;fixed-point&lt;/code&gt; &amp;amp; &lt;code&gt;average-damp&lt;/code&gt; is omitted.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After some experiments, the times of average-damp required are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 ~ 3:  	1&lt;/li&gt;
  &lt;li&gt;4 ~ 7:  	2&lt;/li&gt;
  &lt;li&gt;8 ~ 15: 	3&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
  &lt;li&gt;2&lt;sup&gt;n&lt;/sup&gt; ~ 2&lt;sup&gt;n+1&lt;/sup&gt;-1: n&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, &lt;em&gt;times = log&lt;sub&gt;2&lt;/sub&gt;n&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice that by using &lt;code&gt;(&amp;lt;= times 0)&lt;/code&gt; instead of &lt;code&gt;(= times 0)&lt;/code&gt; in the &lt;em&gt;predicate expression&lt;/em&gt; in &lt;code&gt;repeated&lt;/code&gt;, rounding log&lt;sub&gt;2&lt;/sub&gt;n can be avoided.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;end&quot;&gt;END&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;希望我的小喵会平安地飞回来。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://willx8.com/2016/02/04/SICP-chapter1/</link>
        <guid isPermaLink="true">http://willx8.com/2016/02/04/SICP-chapter1/</guid>
        
        <category>Scheme</category>
        
        <category>寒假</category>
        
        <category>SICP</category>
        
        <category>读书笔记</category>
        
        <category>Functional Programming</category>
        
        
      </item>
    
      <item>
        <title> Hello 2016 &amp; Winter Vacation</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Let there be my blog. “&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section&quot;&gt;搭好博客啦&lt;/h1&gt;
&lt;p&gt;今天冷得不想出门。（好吧其实是女朋友去霓虹玩了）&lt;/p&gt;

&lt;p&gt;终于搭好Jekyll的Blog，~~也就是git clone了一个模板，~~准备开始在上面写东西记录一下自己做的事情了。&lt;/p&gt;

&lt;p&gt;这里是&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; + &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 快速 Building Blog 的技术方案。模板地址在页脚。&lt;/p&gt;

&lt;p&gt;顺便，现在是&lt;strong&gt;2016-01-31&lt;/strong&gt;，不知为何如果把时间调成现在这篇post会显示不出来，我猜是时区的锅。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-1&quot;&gt;寒假里准备做的三件小事&lt;/h1&gt;

&lt;h3 id=&quot;sicp&quot;&gt;1. 读SICP&lt;/h3&gt;
&lt;p&gt;入了英文版的&lt;strong&gt;Structure and Interpretation of Computer Programs&lt;/strong&gt;，开始读啦。&lt;/p&gt;

&lt;p&gt;在这之前，先要装一下&lt;strong&gt;scheme&lt;/strong&gt;。我选择了brew install mit-scheme，然后报需要XQuartz，于是去装XQuartz。觉得下得太慢，就想git clone aria2装个&lt;strong&gt;aria2&lt;/strong&gt;，折腾了一会儿觉得github下载太慢，因为终端不能连shadowsocks，于是上网搜了下，装了&lt;strong&gt;proxychains4&lt;/strong&gt;。OSX 10.11需要去掉系统完整性保护SIP，又要重启-cmd+R-进入终端-csrutil disable，再重启，重新装proxychains4，完成…&lt;/p&gt;

&lt;p&gt;接着，我觉得aria2 terminal太麻烦，换了aria2 Web GUI.&lt;/p&gt;

&lt;p&gt;最后，我觉得brew install太麻烦，下载了mit-scheme-9.2-x86-64.dmg.&lt;/p&gt;

&lt;p&gt;收获是用上了&lt;strong&gt;iTerm&lt;/strong&gt;和&lt;strong&gt;proxychains4&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;mit6824&quot;&gt;2. 跟MIT6.824&lt;/h3&gt;
&lt;p&gt;这是一门分布式系统的课，因为下学期要和小伙伴合作做一个项目了，先学习一个。&lt;br /&gt;
现在做完了Lab1和Lab2 Part A，学习了一下&lt;strong&gt;Go&lt;/strong&gt;，goroutine和Thread相比还是很不一样的。&lt;/p&gt;

&lt;p&gt;其中Lab1做的是MapReduce，填完代码跑过所有测试后觉得还是没有用到很多Google那篇论文里的内容。蛮tricky的一个部分是最后的fault-tolerant worker里最后一个case需要不停地用goroutine监听register，同时一边让worker跑map/reduce。不然很快所有worker都会fail。&lt;/p&gt;

&lt;p&gt;重写了两次master.go的代码，感觉最后一版简洁舒服多了。原来设计成iterate through all jobs and assign them to workers in a new gorouine.后来改成create a goroutine for each worker, who retrieves job from joblist every time it finishes a job.效率提高不上，也增加了代码重用率。不过我没有让map&amp;amp;reduce同时进行，而是先让所有worker do map，再一起do reduce，是可以改进的地方。&lt;/p&gt;

&lt;p&gt;等Lab2写完再一起更。&lt;/p&gt;

&lt;h3 id=&quot;ssc&quot;&gt;3. 写两个&lt;s&gt;可能烂尾的&lt;/s&gt;C++贪吃蛇&lt;/h3&gt;
&lt;p&gt;看到一种说法，自己写几个项目(from scratch)是挺有必要的，是练习语言的好机会。而且，能在写的过程中学习设计模式、 版本控制等等，这是写大作业核心代码比不了的。&lt;/p&gt;

&lt;p&gt;以为然。&lt;br /&gt;
第一个用ncurses写的，命令行版。&lt;br /&gt;
第二个用Qt写，GUI版。本以为命令行版的画图和核心程序算是分开了，只要改一下画图部分就行。后来还是重新学习了一下Qt，原来的&lt;thread&gt;也换成了&lt;qthread&gt;，甚至把核心程序（算是Model吧）的类也继承QObject了，最后改得面目全非，觉得设计模式太丑，心累地搁置了。&lt;/qthread&gt;&lt;/thread&gt;&lt;/p&gt;

&lt;s&gt;插旗：过几天一定再改！&lt;/s&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;希望我的小笨蛋平安回来。&lt;/p&gt;

&lt;p&gt;夹着一月的尾巴：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello 2016~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;center&gt; --William 2016.1.31 &lt;/center&gt;

</description>
        <pubDate>Sat, 30 Jan 2016 22:35:00 +0800</pubDate>
        <link>http://willx8.com/2016/01/30/hello-2016/</link>
        <guid isPermaLink="true">http://willx8.com/2016/01/30/hello-2016/</guid>
        
        <category>生活</category>
        
        <category>寒假</category>
        
        
      </item>
    
  </channel>
</rss>
